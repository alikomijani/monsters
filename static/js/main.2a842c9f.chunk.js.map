{"version":3,"sources":["component/Form/Form.jsx","component/MonsterCard/MonsterCard.jsx","component/delete/Delete.jsx","component/MonsterTable/MonsterTable.jsx","component/Search/Search.jsx","component/MonsterContainer/MonsterContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","state","name","email","handleChange","event","target","value","setState","handleClear","handleSubmit","preventDefault","user","axios","post","then","res","props","handleAdd","data","catch","err","console","log","this","onSubmit","htmlFor","type","id","onChange","onClick","Component","MonsterCard","monster","className","src","alt","Delete","handleDelete","MonsterTable","filteredMonsters","map","item","key","Search","search","MonsterContainer","monsters","filter","obj","toggleForm","showForm","fetch","json","toLowerCase","startsWith","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2a842c9f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nexport default class Form extends Component {\r\n    state = {\r\n        name: '',\r\n        email: ''\r\n    }\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n    handleClear = () => {\r\n        this.setState({ name: '', email: '' })\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { name, email } = this.state;\r\n        const user = { name, email };\r\n        axios.post('https://jsonplaceholder.typicode.com/users' , user).then(res=>{\r\n        this.props.handleAdd(res.data);})\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        const { name, email } = this.state;\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"name\">name:</label>\r\n                <input type=\"text\" name='name' id='name' onChange={this.handleChange} value={name} />\r\n                <label htmlFor=\"email\">email:</label>\r\n                <input type=\"email\" name='email' id='email' onChange={this.handleChange} value={email} />\r\n                <button type=\"submit\">save</button>\r\n                <button type=\"button\" onClick={this.handleClear}>clear</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './monster-card.scss';\r\nexport default class MonsterCard extends Component {\r\n\r\n    render() {\r\n        const {monster} = this.props;\r\n        return (\r\n            <div className='monster-card'>\r\n                <img className='profile' src={'https://api.adorable.io/avatars/256/Ali@adorable.png' + monster.id} alt='profile' />\r\n                <h1>{monster.name}</h1>\r\n                <p>{monster.email}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Delete extends Component {\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.handleDelete} >pack me!</button>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport MonsterCard from '../MonsterCard/MonsterCard';\r\nimport Delete from '../delete/Delete';\r\nimport './monsterTable.scss'\r\nexport class MonsterTable extends Component {\r\n    render() {\r\n        const {filteredMonsters , handleDelete }=this.props;\r\n        return (\r\n            <div className='monster-grid'>\r\n                {filteredMonsters.map((item) => (\r\n                    <div key={item.id}>\r\n                        <MonsterCard monster={item} />\r\n                        <Delete handleDelete={() => handleDelete(item.id)} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MonsterTable\r\n","import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n    render() {\r\n        const { search, handleChange } = this.props;\r\n        return (\r\n            <div className='search-group'>\r\n                <label htmlFor={'search'}>search</label>\r\n                <input id='search' name={'search'} onChange={handleChange} value={search} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react';\r\n\r\nimport Form from '../Form/Form';\r\nimport MonsterTable from '../MonsterTable/MonsterTable';\r\nimport Search from '../Search/Search';\r\nimport './monster-container.scss';\r\nexport default class MonsterContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log('constractor is loaded!');\r\n        this.state = {\r\n            monsters: [],\r\n            search: '',\r\n            showForm: false\r\n        }\r\n    }\r\n    handleDelete = (id) => {\r\n        const { monsters } = this.state;\r\n        this.setState({ monsters: monsters.filter(monster => monster.id !== id) });\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json()).then(data => {\r\n            this.setState({ monsters: data })\r\n        })\r\n    }\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value })\r\n    }\r\n    handleAdd = (obj) => {\r\n        this.setState({ monsters: [obj, ...this.state.monsters] })\r\n    }\r\n    toggleForm = () => {\r\n        this.setState(\r\n            { showForm: !this.state.showForm }\r\n        )\r\n    }\r\n    render() {\r\n        const { monsters, search, showForm } = this.state;\r\n        let filteredMonsters = monsters.filter(item => item.name.toLowerCase().startsWith(search.toLowerCase()))\r\n        return (\r\n            <div className= 'monster-container'>\r\n                <Search handleChange={this.handleChange} search={search} />\r\n                <button onClick={this.toggleForm}> {showForm ?  \"hide form\":\"show form\" } </button>\r\n                {\r\n                    showForm ? <Form handleAdd={this.handleAdd} /> : null\r\n                }\r\n                <MonsterTable filteredMonsters={filteredMonsters} handleDelete={this.handleDelete} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MonsterContainer from './component/MonsterContainer/MonsterContainer';\nclass App extends React.Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <MonsterContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}