{"version":3,"sources":["Views/MonsterSingle/MonsterSingle.jsx","component/AddNewMonster/AddNewMonster.jsx","Views/AddMonster/AddMonster.jsx","component/MonsterCard/MonsterCard.jsx","component/Search/Search.jsx","component/MonsterContainer/MonsterContainer.jsx","Views/MonstersArchive/MonsterArchive.jsx","App.js","serviceWorker.js","index.js"],"names":["MonsterSingle","props","console","log","id","useParams","useState","monster","setMonster","useEffect","monsters","JSON","parse","localStorage","getItem","find","item","getData","className","Card","CardHeader","name","CardImg","top","width","src","alt","CardBody","email","phone","username","website","CardFooter","AddNewMonster","handleAdd","history","useHistory","user","setUser","handleChange","event","target","value","Form","onSubmit","preventDefault","userId","uuidv4","push","setItem","stringify","FormGroup","Label","htmlFor","Input","placeholder","type","onChange","Button","color","onClick","AddMonster","MonsterCard","DeleteMe","CardTitle","to","substring","CardSubtitle","CardText","block","Search","search","MonsterContainer","setMonsters","setSearch","deleteModal","setDeleteModal","selectedMonster","setSelectedMonster","pending","toggleDeleteModal","filteredMonsters","filter","toLowerCase","startsWith","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","Spinner","Row","xs","sm","md","xl","map","Col","key","MonsterArchive","App","setIsOpen","Container","Navbar","light","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","exact","path","component","render","isLoading","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.727da436.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useParams, Redirect } from 'react-router-dom';\r\nimport { Card, CardBody, CardFooter, CardHeader, CardImg } from 'reactstrap';\r\nimport axios from 'axios';\r\nfunction MonsterSingle(props) {\r\n    console.log(props)\r\n    const { id } = useParams();\r\n    const [monster, setMonster] = useState({})\r\n    const getData = () => {\r\n        // axios.get(`https://jsonplaceholder.typicode.com/users/${id}`).\r\n        //     then(res => res.data).then(data => {\r\n        //         SetMonster(data);\r\n        //         console.log(data)\r\n        //     }).catch(err => {\r\n        //         SetMonster(false)\r\n        //     }\r\n        //     )\r\n        let monsters = JSON.parse(localStorage.getItem('monsters'))\r\n        setMonster(monsters.find(item=>item.id == id))\r\n    }\r\n    useEffect(() => { getData(); }, []);\r\n    return (\r\n        <div className='MonsterSingle mt-1'>\r\n            <Card>\r\n                <CardHeader>{monster.name}</CardHeader>\r\n                <CardImg className={'rounded-0'} top width='100%' src={'https://picsum.photos/700/200'} alt=\"Card image cap\"/>\r\n                <CardBody>\r\n                    email: {monster.email}<br />\r\n                    name: {monster.name}<br />\r\n                    phone: {monster.phone}<br />\r\n                    username: {monster.username}<br />\r\n                    website: {monster.website}<br />\r\n                </CardBody>\r\n                <CardFooter></CardFooter>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MonsterSingle\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Form, Input, FormGroup, Label, Button } from 'reactstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport default function AddNewMonster({ handleAdd }) {\r\n    let history = useHistory();\r\n    const [user, setUser] = useState({\r\n        name: '',\r\n        email: '',\r\n        website:'',\r\n        phone:'',\r\n        username:''\r\n    })\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setUser({ ...user, [name]: value });\r\n    }\r\n    const handleClear = () => {\r\n        setUser({ name: '', email: '' })\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let monsters=localStorage.getItem('monsters')?JSON.parse(localStorage.getItem('monsters')):[]\r\n        const userId = uuidv4();\r\n        monsters.push({...user , id:userId})\r\n        localStorage.setItem('monsters',JSON.stringify(monsters))\r\n        history.push(`/monsters/${userId}`);\r\n    }\r\n    const { name, email, website, phone,username } = user;\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <FormGroup>\r\n                <Label htmlFor=\"name\">name:</Label>\r\n                <Input placeholder='Name' type=\"text\" name='name' id='name' onChange={handleChange} value={name} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label htmlFor=\"email\">email:</Label>\r\n                <Input placeholder='Email' type=\"email\" name='email' id='email' onChange={handleChange} value={email} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label htmlFor=\"email\">phone:</Label>\r\n                <Input placeholder='phone' type=\"phone\" name='phone' id='phone' onChange={handleChange} value={phone} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label htmlFor=\"username\">username:</Label>\r\n                <Input placeholder='username' type=\"text\" name='username' id='username' onChange={handleChange} value={username} />\r\n            </FormGroup>\r\n            <FormGroup>\r\n                <Label htmlFor=\"website\">website:</Label>\r\n                <Input placeholder='website' type=\"url\" name='website' id='website' onChange={handleChange} value={website} />\r\n            </FormGroup>\r\n            <Button color='primary' type=\"submit\">save</Button> {' '}\r\n            <Button type=\"button\" onClick={handleClear}>clear</Button>\r\n        </Form>\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport AddNewMonster from '../../component/AddNewMonster/AddNewMonster';\r\nfunction AddMonster({handleAdd}) {\r\n    return (\r\n        <div className='AddMonster'>\r\n            <AddNewMonster handleAdd={handleAdd} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddMonster;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle, Button\r\n} from 'reactstrap';\r\nexport default function MonsterCard({ monster, DeleteMe }) {\r\n    return (\r\n        <Card className='monster-card '>\r\n            <CardImg top width=\"100%\" src={'https://api.adorable.io/avatars/256/Ali@adorable.png' + monster.id} alt=\"Card image cap\" />\r\n            <CardBody>\r\n                <CardTitle className='mt-2'>\r\n                    <Link to={`/monsters/${monster.id}`}>\r\n                        <h5>{monster.name.substring(0, 15)}</h5>\r\n                    </Link>\r\n                </CardTitle>\r\n                <CardSubtitle>{monster.email}</CardSubtitle>\r\n                <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\r\n                <Button block onClick={DeleteMe} color='warning'>Delete</Button>\r\n            </CardBody>\r\n            \r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nfunction Search ({ search, handleChange  }) {\r\n        return (\r\n            <Form>\r\n                <FormGroup>\r\n                    <Label htmlFor='search'>Search</Label>\r\n                    <Input type='search' id='search' name={'search'} value={search} onChange={handleChange}  />\r\n                </FormGroup>\r\n            </Form>\r\n        )\r\n}\r\n\r\nexport default Search\r\n","import React, { useState, useEffect } from 'react';\r\nimport MonsterCard from '../MonsterCard/MonsterCard';\r\nimport Search from '../Search/Search';\r\nimport { Row, Col, Modal, ModalHeader, ModalFooter, ModalBody, Button, Spinner } from 'reactstrap'\r\nexport default function MonsterContainer() {\r\n\r\n    const [monsters, setMonsters] = useState(localStorage.getItem('monsters')?JSON.parse(localStorage.getItem('monsters')):[]);\r\n    const [search, setSearch] = useState('');\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const [selectedMonster, setSelectedMonster] = useState(null);\r\n    const [pending, setPending] = useState(false);\r\n\r\n    const handleDelete = (id) => {\r\n        setMonsters(monsters.filter(monster => monster.id !== id));\r\n        localStorage.setItem('monsters',JSON.stringify(monsters.filter(monster => monster.id !== id)))\r\n    }\r\n    useEffect(() => {\r\n        \r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        const { value } = event.target;\r\n        setSearch(value);\r\n    }\r\n    // const handleAddMonster = (obj) => {\r\n    //     setMonsters([obj, ...monsters])\r\n    // }\r\n    const toggleDeleteModal = (id = null) => {\r\n        setDeleteModal(!deleteModal);\r\n        setSelectedMonster(id);\r\n    }\r\n    console.log(monsters);\r\n    let filteredMonsters = monsters.filter(item => item.name.toLowerCase().startsWith(search.toLowerCase()))\r\n    return (\r\n        <>\r\n            <Modal isOpen={deleteModal} toggle={toggleDeleteModal}>\r\n                <ModalHeader toggle={toggleDeleteModal} className='bg-warning'>DELETE</ModalHeader>\r\n                <ModalBody>Are your sure to delete this item?</ModalBody>\r\n                <ModalFooter>\r\n                    <Button onClick={() => {\r\n                        handleDelete(selectedMonster);\r\n                        toggleDeleteModal();\r\n                    }\r\n                    } color='danger'>Delete</Button>\r\n                    <Button onClick={toggleDeleteModal} color='primary'>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n            <Search handleChange={handleChange} search={search} />\r\n            {\r\n                pending ? <div className='text-center'>\r\n                    <Spinner color=\"primary\" />\r\n                    <Spinner color=\"secondary\" />\r\n                    <Spinner color=\"success\" />\r\n                    <Spinner color=\"danger\" />\r\n                    <Spinner color=\"warning\" />\r\n                    <Spinner color=\"info\" />\r\n                    <Spinner color=\"dark\" />\r\n                </div> : <Row className='monster-container' xs=\"1\" sm=\"2\" md=\"3\" xl=\"4\" >\r\n                        {filteredMonsters.map((item) => (\r\n                            <Col key={item.id} className={'mt-4'}>\r\n                                <MonsterCard monster={item} DeleteMe={() => toggleDeleteModal(item.id)} />\r\n                            </Col>\r\n                        ))}\r\n                    </Row>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport MonsterContainer from '../../component/MonsterContainer/MonsterContainer';\r\nfunction MonsterArchive(props) {\r\n    return (\r\n        <div className=\"MonsterArchive\">\r\n            <MonsterContainer />\r\n        </div>\r\n    )\r\n}\r\nexport default MonsterArchive;","import React ,{useState} from 'react';\n\nimport MonsterSingle from './Views/MonsterSingle/MonsterSingle';\nimport AddMonster from './Views/AddMonster/AddMonster';\nimport MonsterArchive from './Views/MonstersArchive/MonsterArchive';\nimport {\n  Container,\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n} from 'reactstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nfunction App() {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <div className='App'>\n      <Container >\n        <Router>\n          <Navbar color=\"light\" light expand=\"md\">\n            <NavbarBrand >Monsters</NavbarBrand>\n            <NavbarToggler onClick={toggle} />\n            <Collapse isOpen={isOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n                <NavItem>        \n                  <Link className='nav-link' to=\"/monsters\">Monsters list</Link>\n                </NavItem>\n                <NavItem>\n                  <Link  className='nav-link' to=\"/monsters/add\">New Monster</Link> \n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n          <Switch>\n            <Route exact path=\"/monsters\" >\n              <MonsterArchive />\n            </Route>\n            <Route exact path=\"/monsters/add\" component={AddMonster} />\n            <Route path=\"/monsters/:id\"\n              render={(props) => <MonsterSingle isLoading={true} {...props} />} />\n          </Switch>\n        </Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}